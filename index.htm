<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily AI Landing Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
            text-align: center;
        }
        header {
            background-color: #007bff;
            color: white;
            padding: 20px;
        }
        section {
            margin: 20px auto;
            max-width: 800px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        #ai-image {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
        }
        /* Poll Styles (adapted from CodePen example) */
        #poll-container {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
        }
        .choice {
            height: 300px;
            display: inline-block;
            width: 150px;
            margin: 10px;
        }
        .result {
            height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
        }
        .bar {
            height: 0%;
            width: 80%;
            margin: 0 auto;
            transition: height 0.3s ease;
        }
        .bar[data-choice="1"] {
            background-color: #ff6384;
        }
        .bar[data-choice="2"] {
            background-color: #36a2eb;
        }
        .bar[data-choice="3"] {
            background-color: #ffce56;
        }
        .label {
            height: 100px;
            text-align: center;
        }
        .label button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
        }
        .label button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <header>
        <h1>Welcome to Daily AI Content</h1>
        <p>Your daily dose of AI-generated inspiration, images, and polls.</p>
    </header>
    <section id="daily-content">
        <h2>Daily Content</h2>
        <p id="content-text">Loading content...</p>
    </section>
    <section id="daily-image">
        <h2>Daily Image</h2>
        <img id="ai-image" src="" alt="AI Generated Image">
    </section>
    <section id="daily-poll">
        <h2>Daily Poll</h2>
        <div id="poll-container">
            <!-- Poll will be dynamically inserted here -->
        </div>
    </section>
    <script>
        // Replace with your actual xAI API key (sign up at https://x.ai/api)
        const API_KEY = 'your-xai-api-key-here';
        const API_BASE = 'https://api.x.ai/v1';

        // Function to generate text using xAI API (Grok 4 model)
        async function generateText(prompt) {
            try {
                const response = await fetch(`${API_BASE}/chat/completions`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'grok-4',
                        messages: [{ role: 'user', content: prompt }],
                        max_tokens: 300
                    })
                });
                if (!response.ok) throw new Error('API request failed');
                const data = await response.json();
                return data.choices[0].message.content.trim();
            } catch (error) {
                console.error('Text generation error:', error);
                return 'Error generating content. Check API key and console.';
            }
        }

        // Function to generate image using xAI API (Grok 2 Image-1212 model)
        async function generateImage(prompt) {
            try {
                const response = await fetch(`${API_BASE}/images/generations`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: 'grok-2-image-1212',
                        prompt: prompt,
                        n: 1
                    })
                });
                if (!response.ok) throw new Error('API request failed');
                const data = await response.json();
                return data.data[0].url; // Assumes response format similar to OpenAI
            } catch (error) {
                console.error('Image generation error:', error);
                return 'https://via.placeholder.com/400?text=Error+Generating+Image'; // Fallback placeholder
            }
        }

        // Function to update the page with new AI-generated content if it's a new day
        async function updateDailyContent() {
            const today = new Date().toISOString().split('T')[0];
            const lastUpdate = localStorage.getItem('lastUpdate');
            if (lastUpdate === today) {
                // Load saved content if available (optional enhancement)
                return;
            }

            // Generate daily content
            const contentPrompt = `Generate a short inspirational article (200-300 words) for today's date: ${today}.`;
            const content = await generateText(contentPrompt);
            document.getElementById('content-text').innerText = content;

            // Generate daily image
            const imagePrompt = `Create an inspirational landscape image related to AI and motivation for ${today}.`;
            const imageUrl = await generateImage(imagePrompt);
            document.getElementById('ai-image').src = imageUrl;

            // Generate daily poll (as JSON)
            const pollPrompt = `Generate a fun poll question about AI or technology for ${today}, with exactly 3 options. Output as JSON: {"question": "Your question?", "options": ["Option 1", "Option 2", "Option 3"]}`;
            const pollJsonStr = await generateText(pollPrompt);
            let poll;
            try {
                poll = JSON.parse(pollJsonStr);
            } catch {
                poll = { question: 'Fallback Poll: Favorite AI Use?', options: ['Chatbots', 'Image Gen', 'Coding'] };
            }

            // Build poll HTML
            let pollHtml = `<h3>${poll.question}</h3><div id="choices">`;
            poll.options.forEach((opt, index) => {
                const choiceNum = index + 1;
                pollHtml += `
                    <div class="choice">
                        <div class="result">
                            <div class="bar" data-choice="${choiceNum}"></div>
                        </div>
                        <div class="label">
                            <p>${opt}</p>
                            <button data-choice="${choiceNum}">Vote</button>
                        </div>
                    </div>
                `;
            });
            pollHtml += `</div>`;
            document.getElementById('poll-container').innerHTML = pollHtml;

            // Initialize poll voting (client-side, per-user via localStorage for persistence)
            let tally = JSON.parse(localStorage.getItem('pollTally')) || { total: 0, 1: 0, 2: 0, 3: 0 };
            const buttons = document.querySelectorAll('#choices button');
            buttons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const choice = e.target.dataset.choice;
                    tally[choice]++;
                    tally.total++;
                    localStorage.setItem('pollTally', JSON.stringify(tally));
                    renderBars();
                });
            });

            function renderBars() {
                const bars = document.querySelectorAll('.bar');
                bars.forEach(bar => {
                    const choice = bar.dataset.choice;
                    const perc = tally.total > 0 ? (tally[choice] / tally.total * 100) : 0;
                    bar.style.height = `${perc}%`;
                });
            }
            renderBars(); // Initial render

            // Save update date
            localStorage.setItem('lastUpdate', today);
        }

        // Run on page load
        window.addEventListener('load', updateDailyContent);
    </script>
</body>
</html>
